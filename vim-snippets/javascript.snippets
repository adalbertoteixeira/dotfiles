snippet jsconsolelog
console.log('${2:DEBUG}', ${1:value});$0
endsnippet

snippet jsconsolelognamed
console.log('$1', ${1:value});$0
endsnippet

snippet reactcomponent
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class ${1:ClassName} extends Component {
  render() {
    return (
      <div />
    );
  }
}

$1.propTypes = {

};

$1.defaultProps = {

};

export default $1;
endsnippet


snippet reactcomponentconnected
import React, { Component } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

class ${1:ClassName} extends Component {
  render() {
    return (
      <div />
    );
  }
}

$1.propTypes = {

};

$1.defaultProps = {

};

const mapStateToProps = state => ({});
const mapDispatchToProps = dispatch => ({})

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

snippet reactpurefunction
import React from 'react';
import PropTypes from 'prop-types';

const ${1:ClassName} = ({

}) => (
	<div />
);

$1.propTypes = {

};

$1.defaultProps = {

};

export default $1;
endsnippet


snippet reactflowpurefunction
// @flow

import React from 'react';

const ${1:ClassName} = ({

}) => (
	<div />
);

$1.defaultProps = {

};

export default $1;
endsnippet

snippet reactpurefunctionconnected
import React, { Component } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

const ${1:ClassName} = ({

		}) => (
	<div />
);

$1.defaultProps = {

};

const mapStateToProps = state => ({});
const mapDispatchToProps = dispatch => ({})

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

snippet reactflowpurefunctionconnected
// @flow

import React from 'react';
import { connect } from 'react-redux';

const ${1:ClassName} = ({

}) => (
	<div />
);

$1.defaultProps = {

};

const mapStateToProps = state => ({});
const mapDispatchToProps = dispatch => ({})

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

snippet jestspec
import React from 'react';
import { mount } from 'enzyme';
import ${1:Component} from './$2/$1/$1';

describe('$1', () => {
  it('$3', () => {
    const wrapper = mount(
		<$1 />,
		);
    const instance = wrapper.instance();
    expect(instance).toBeInstanceOf($1);
  });
});
endsnippet

snippet jestdescribe
describe('$1', () => {
	it('$3', () => {
	});
});
endsnippet

snippet jestbenspecmockstore
import React from 'react';
import { mount } from 'enzyme';
import { Provider } from 'react-redux';
import mockedStore from '@store/utils/mockedStore';
import ${1:Component} from './$2/$1/$1';

describe('$1', () => {
  it('$3', () => {
    const store = mockedStore({});
    store.dispatch = jest.fn();

		const wrapper = mount(
      <Provider store={store}>
        <$1 />
      </Provider>,
    );
    const instance = wrapper.instance();
    expect(instance).toBeInstanceOf($1);
  });
});
endsnippet

snippet jestspecmockstore
import React from 'react';
import { mount } from 'enzyme';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import ${1:Component} from './$2/$1/$1';


const middlewares = [];
const mockedStore = configureStore(middlewares);

describe('$1', () => {
  it('$3', () => {
		 const store = mockedStore({})
    store.dispatch = jest.fn();

		const wrapper = mount(
      <Provider store={store}>
        <$1 />
      </Provider>,
    );
    const instance = wrapper.instance();
    expect(instance).toBeInstanceOf($1);
  });
});
endsnippet
